class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        
        int[] indegree = new int[numCourses];
        
        // switched edge: course -> prereq
        for (int[] pre : prerequisites) {
            int course = pre[0];
            int prereq = pre[1];
            graph.get(course).add(prereq);
            indegree[prereq]++;
        }
        
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }
        
        List<Integer> orderList = new ArrayList<>();
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            orderList.add(curr);
            
            for (int neighbor : graph.get(curr)) {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) queue.offer(neighbor);
            }
        }
        
        if (orderList.size() != numCourses) return new int[0];
        
        // reverse to get correct course order
        int[] order = new int[numCourses];
        for (int i = 0; i < numCourses; i++)
            order[i] = orderList.get(numCourses - 1 - i);
        
        return order;
    }
}
